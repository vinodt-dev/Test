private async Task<IActionResult> ExportAdHocReportToPdf(string reportId)
{
    var saveResponse = await _reportComponent.GetAdhocReportDatatable(reportId, _userContext.EmployeeId);

    string fileName = $"AdHocReport_{DateTime.Now:yyyy-MM-dd_HH-mm-ss-fff}.pdf";

    // Initialize PDF Document
    RadFixedDocument document = new RadFixedDocument();
    RadFixedPage page = document.Pages.AddPage();
    FixedContentEditor editor = new FixedContentEditor(page);

    // Define Font
    var font = FontsRepository.Helvetica;

    // Set Margins and Page Size
    double margin = 50;
    double maxHeight = page.Size.Height - margin * 2;
    double yPosition = margin;

    // Add Document Header
    editor.Position.Translate(margin, yPosition);
    editor.DrawText($"Export Date: {DateTime.Now.ToShortDateString()}", font, 12);

    yPosition += 20;
    editor.Position.Translate(margin, yPosition);
    editor.DrawText($"Report Type: Adhoc", font, 12);

    yPosition += 20;
    editor.Position.Translate(margin, yPosition);
    editor.DrawText($"Criteria: {saveResponse.ReportCriteria}", font, 12);

    yPosition += 40; // Move down for table

    // Extract Headers
    var headers = saveResponse.ReportFields.Split(',')
        .Select(item => item.Trim())
        .ToList();

    // Function to create a new page
    void CreateNewPage()
    {
        page = document.Pages.AddPage();
        editor = new FixedContentEditor(page);
        yPosition = margin;
    }

    // Function to add table with dynamic content
    void AddTable(List<string[]> tableData)
    {
        Table table = new Table();
        Border border = new Border(1, BorderStyle.Single, new RgbColor(0, 0, 0));
        table.DefaultCellProperties.Borders = new TableCellBorders(border, border, border, border);
        table.DefaultCellProperties.Padding = new Thickness(10);

        // Add dynamic rows
        foreach (var rowData in tableData)
        {
            TableRow row = table.Rows.AddTableRow();
            foreach (var cellValue in rowData)
            {
                row.Cells.AddTableCell().Blocks.AddBlock().InsertText(cellValue);
            }
        }

        editor.Position.Translate(margin, yPosition);
        editor.DrawTable(table, new Size(180, double.PositiveInfinity));
        yPosition += table.DesiredSize.Height;
    }

    // Prepare table data
    var tableData = new List<string[]>();

    // Add headers to table data
    tableData.Add(headers.ToArray());

    // Add data rows to table data
    foreach (DataRow row in saveResponse.ReportDatatable.Rows)
    {
        var rowData = headers.Select(header => row[header]?.ToString() ?? "-").ToArray();
        tableData.Add(rowData);
    }

    // Add the table to the document
    AddTable(tableData);

    // Save PDF to Stream
    PdfFormatProvider provider = new PdfFormatProvider();
    byte[] pdfBytes;
    using (MemoryStream stream = new MemoryStream())
    {
        provider.Export(document, stream);
        pdfBytes = stream.ToArray();
    }

    return File(pdfBytes, "application/pdf", fileName);
}
