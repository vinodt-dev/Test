public byte[] ExportAdHocReportToPdf(AdHocReportResponse response)
{
    var headers = GetHeaders(response.ReportFields);
    var pageSize = GetPageSize(headers.Count);
    
    var document = new RadFixedDocument(); // ✅ Holds the entire document in memory
    var page = document.Pages.AddPage();
    var editor = new FixedContentEditor(page);
    var font = FontsRepository.Helvetica;

    double margin = 50;
    double maxHeight = pageSize.Height - margin * 2;
    double maxWidth = pageSize.Width - margin * 2;
    double yPosition = margin;

    // ✅ Add header information (Optimized)
    AddHeaderInfo(editor, font, margin, ref yPosition, response.ReportCriteria);

    // ✅ Add table headers
    AddTableHeaders(editor, headers, margin, maxWidth, ref yPosition);

    bool isAlternateRow = false;

    // ✅ Iterate directly over DataTable.Rows (avoids unnecessary List allocation)
    foreach (DataRow data in response.ReportDatatable.Rows)
    {
        double rowHeight = AddDataRow(editor, headers, data, margin, maxWidth, ref isAlternateRow, ref yPosition);

        // ✅ Create new page when needed
        if (yPosition + rowHeight > maxHeight)
        {
            page = document.Pages.AddPage();
            editor = new FixedContentEditor(page);
            yPosition = margin;
            AddTableHeaders(editor, headers, margin, maxWidth, ref yPosition);
        }
    }

    // ✅ Add footers
    AddFooters(document, margin);

    // ✅ Optimize MemoryStream usage
    using (var stream = new MemoryStream(4096)) // Pre-allocate size to avoid multiple resizes
    {
        var provider = new PdfFormatProvider();
        provider.Export(document, stream);
        document = null; // ✅ Release memory reference of the document immediately
        GC.Collect(); // ✅ Force garbage collection to clean up unused objects
        return stream.ToArray(); // ✅ Return byte array of PDF
    }
}
