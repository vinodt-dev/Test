private async Task<byte[]> GeneratePdfWithPdfSharp(string reportId)
{
    var response = _reportComponent.GetReportData(reportId);
    var headers = GetHeaders(response.ReportFields);

    using var document = new PdfDocument();
    
    // ✅ Determine Page Size Dynamically Based on Column Count
    var pageSize = GetDynamicPageSize(headers.Count);
    var page = document.AddPage();
    page.Width = pageSize.Width;
    page.Height = pageSize.Height;

    var gfx = XGraphics.FromPdfPage(page);
    var font = new XFont("Arial", 12, XFontStyle.Bold);
    var dataFont = new XFont("Arial", 10);

    double margin = 40;
    double yPosition = margin;
    double xStart = margin;
    double columnWidth = (page.Width - 2 * margin) / headers.Count;
    double rowHeight = 20;

    // ✅ Draw Table Headers
    foreach (var header in headers)
    {
        gfx.DrawRectangle(XBrushes.LightGray, xStart, yPosition, columnWidth, rowHeight);
        gfx.DrawString(header, font, XBrushes.Black, new XPoint(xStart + 5, yPosition + 15));
        xStart += columnWidth;
    }
    yPosition += rowHeight;

    // ✅ Draw Table Data (Row by Row)
    foreach (DataRow row in response.ReportDatatable.Rows)
    {
        xStart = margin; // Reset for each row
        foreach (var header in headers)
        {
            gfx.DrawRectangle(XBrushes.White, xStart, yPosition, columnWidth, rowHeight);
            gfx.DrawString(row[header]?.ToString() ?? "", dataFont, XBrushes.Black, new XPoint(xStart + 5, yPosition + 15));
            xStart += columnWidth;
        }

        yPosition += rowHeight;

        // ✅ Add New Page if Needed
        if (yPosition + rowHeight > page.Height - margin)
        {
            page = document.AddPage();
            page.Width = pageSize.Width;
            page.Height = pageSize.Height;
            gfx = XGraphics.FromPdfPage(page);
            yPosition = margin;
        }
    }

    // ✅ Save to MemoryStream & Return as Byte Array
    using var stream = new MemoryStream();
    document.Save(stream);
    return stream.ToArray();
}

// ✅ Dynamic Page Sizing Based on Column Count
