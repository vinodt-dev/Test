public async Task<IActionResult> ExportAdHocReportToPdf(string reportId)
{
    byte[] pdfBytes = await GeneratePdfWithPdfSharp(reportId);
    string fileName = $"AdHocReport_{DateTime.Now:yyyy-MM-dd_HH-mm-ss-fff}.pdf";
    return File(pdfBytes, "application/pdf", fileName);
}

private async Task<byte[]> GeneratePdfWithPdfSharp(string reportId)
{
    var response = _reportComponent.GetReportData(reportId);
    var headers = GetHeaders(response.ReportFields);

    using var document = new PdfDocument();
    var page = document.AddPage();
    var gfx = XGraphics.FromPdfPage(page);
    var font = new XFont("Arial", 12, XFontStyle.Bold);

    double yPosition = 50;

    // ✅ Add Header
    gfx.DrawString("AdHoc Report", font, XBrushes.Black, new XPoint(50, yPosition));
    yPosition += 20;

    // ✅ Add Table Headers
    foreach (var header in headers)
    {
        gfx.DrawString(header, font, XBrushes.Black, new XPoint(50, yPosition));
        yPosition += 20;
    }

    // ✅ Add Table Data
    var dataFont = new XFont("Arial", 10);
    foreach (DataRow row in response.ReportDatatable.Rows)
    {
        foreach (var header in headers)
        {
            gfx.DrawString(row[header]?.ToString() ?? "", dataFont, XBrushes.Black, new XPoint(50, yPosition));
        }
        yPosition += 20;
    }

    // ✅ Save to MemoryStream instead of FileStream
    using var stream = new MemoryStream();
    document.Save(stream);
    return stream.ToArray();
}
