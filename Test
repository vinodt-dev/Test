{
    var saveResponse = await _reportComponent.GetAdhocReportDatatable(reportId, _userContext.EmployeeId);

    string fileName = $"AdHocReport_{DateTime.Now:yyyy-MM-dd_HH-mm-ss-fff}.pdf";

    // Build HTML content for the report
    StringBuilder htmlContent = new StringBuilder();

    // Add CSS styles for the report table and other formatting
    htmlContent.AppendLine("<html>");
    htmlContent.AppendLine("<head>");
    htmlContent.AppendLine("<style>");
    htmlContent.AppendLine("body { font-family: Helvetica, Arial, sans-serif; font-size: 12px; }");
    htmlContent.AppendLine("table { width: 100%; border-collapse: collapse; margin-top: 20px; }");
    htmlContent.AppendLine("th, td { padding: 8px; text-align: center; border: 1px solid #000; }");
    htmlContent.AppendLine("th { background-color: #000; color: #fff; font-size: 14px; }");
    htmlContent.AppendLine("</style>");
    htmlContent.AppendLine("</head>");
    htmlContent.AppendLine("<body>");

    // Add Header Information
    htmlContent.AppendLine("<p><strong>Export Date:</strong> " + DateTime.Now.ToShortDateString() + "</p>");
    htmlContent.AppendLine("<p><strong>Report Type:</strong> Adhoc</p>");
    htmlContent.AppendLine("<p><strong>Criteria:</strong> " + saveResponse.ReportCriteria + "</p>");

    // Add Table
    htmlContent.AppendLine("<table>");

    // Extract Headers
    var headers = saveResponse.ReportFields.Split(',')
        .Select(item => item.Trim())
        .ToList();

    // Add table headers
    htmlContent.AppendLine("<tr>");
    foreach (var header in headers)
    {
        htmlContent.AppendLine($"<th>{header}</th>");
    }
    htmlContent.AppendLine("</tr>");

    // Add Data Rows
    foreach (var row in saveResponse.ReportDatatable.Rows.Cast<System.Data.DataRow>())
    {
        htmlContent.AppendLine("<tr>");
        foreach (var header in headers)
        {
            var cellValue = row[header]?.ToString() ?? "-";
            htmlContent.AppendLine($"<td>{cellValue}</td>");
        }
        htmlContent.AppendLine("</tr>");
    }

    // Close the table and body
    htmlContent.AppendLine("</table>");
    htmlContent.AppendLine("</body>");
    htmlContent.AppendLine("</html>");

    // Convert HTML to PDF using Telerik's HtmlFormatProvider
    HtmlFormatProvider provider = new HtmlFormatProvider();
    RadFixedDocument document = provider.Import(htmlContent.ToString());

    // Save PDF to Stream
    PdfFormatProvider pdfProvider = new PdfFormatProvider();
    byte[] pdfBytes;
    using (MemoryStream stream = new MemoryStream())
    {
        pdfProvider.Export(document, stream);
        pdfBytes = stream.ToArray();
    }

    return File(pdfBytes, "application/pdf", fileName);
}
