using Microsoft.AspNetCore.Mvc;
using System.Text;
using System.Threading.Tasks;
using Telerik.Reporting;
using Telerik.Reporting.Processing;
using System.Linq;
using System;

public class ReportController : ControllerBase
{
    private readonly IReportComponent _reportComponent;
    private readonly IUserContext _userContext;

    public ReportController(IReportComponent reportComponent, IUserContext userContext)
    {
        _reportComponent = reportComponent;
        _userContext = userContext;
    }

    [HttpGet("generate-report/{reportId}")]
    public async Task<IActionResult> GenerateAdhocReportPdf(int reportId)
    {
        // Fetch report data (this is a placeholder for your actual data retrieval logic)
        var saveResponse = await _reportComponent.GetAdhocReportDatatable(reportId, _userContext.EmployeeId);

        // Set the file name with a timestamp
        string fileName = $"AdHocReport_{DateTime.Now:yyyy-MM-dd_HH-mm-ss-fff}.pdf";

        // Create a Telerik Report instance
        var report = new Telerik.Reporting.Report();

        // Create an ObjectDataSource to bind the DataTable (from your saveResponse) to the report
        var dataSource = new Telerik.Reporting.ObjectDataSource
        {
            DataSource = saveResponse.ReportDatatable
        };

        // Assign the data source to the report
        report.DataSource = dataSource;

        // Create a Table for displaying the data in the report
        var table = new Telerik.Reporting.Table
        {
            DataSource = dataSource
        };

        // Extract headers (assuming saveResponse.ReportFields contains the headers in a comma-separated format)
        var headers = saveResponse.ReportFields.Split(',')
            .Select(item => item.Trim())
            .ToList();

        // Add additional header row for Export Date and Report Type
        var headerRow = new Telerik.Reporting.TableRow();

        // Add "Export Date" header
        var exportDateCell = new Telerik.Reporting.TableCell
        {
            Value = "Export Date: " + DateTime.Now.ToShortDateString(),
            ColSpan = headers.Count // span across all columns
        };
        exportDateCell.Style.BackgroundColor = System.Drawing.Color.Gray;
        exportDateCell.Style.Color = System.Drawing.Color.White;
        exportDateCell.Style.Font.Bold = true;
        headerRow.Cells.Add(exportDateCell);

        // Add "Report Type" header
        var reportTypeCell = new Telerik.Reporting.TableCell
        {
            Value = "Report Type: Adhoc",
            ColSpan = headers.Count // span across all columns
        };
        reportTypeCell.Style.BackgroundColor = System.Drawing.Color.Gray;
        reportTypeCell.Style.Color = System.Drawing.Color.White;
        reportTypeCell.Style.Font.Bold = true;
        headerRow.Cells.Add(reportTypeCell);

        table.Body.Rows.Add(headerRow);

        // Add another row for column headers
        var columnHeaderRow = new Telerik.Reporting.TableRow();
        foreach (var header in headers)
        {
            var headerCell = new Telerik.Reporting.TableCell
            {
                Value = header
            };
            headerCell.Style.BackgroundColor = System.Drawing.Color.Black;
            headerCell.Style.Color = System.Drawing.Color.White;
            headerCell.Style.Font.Bold = true;
            columnHeaderRow.Cells.Add(headerCell);
        }
        table.Body.Rows.Add(columnHeaderRow);

        // Add data rows dynamically
        foreach (var row in saveResponse.ReportDatatable.Rows.Cast<System.Data.DataRow>())
        {
            var dataRow = new Telerik.Reporting.TableRow();
            foreach (var header in headers)
            {
                var dataCell = new Telerik.Reporting.TableCell
                {
                    Value = row[header]?.ToString() ?? "-"
                };
                dataRow.Cells.Add(dataCell);
            }
            table.Body.Rows.Add(dataRow);
        }

        // Add the table to the report's Items collection
        report.Items.Add(table);

        // Initialize the Report Processor to render the report
        var reportProcessor = new ReportProcessor();
        var result = reportProcessor.RenderReport("PDF", report, null);

        // Return the generated PDF as a downloadable file
        return File(result.DocumentBytes, "application/pdf", fileName);
    }
}
