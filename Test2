private async Task<IActionResult> ExportAdHocReportToPdf(string reportId)
{
    var saveResponse = await _reportComponent.GetAdhocReportDatatable(reportId, _userContext.EmployeeId);

    if (saveResponse?.ReportDatatable == null || saveResponse.ReportDatatable.Rows.Count == 0)
    {
        return BadRequest("No data available for export.");
    }

    string fileName = $"AdHocReport_{DateTime.Now:yyyy-MM-dd_HH-mm-ss-fff}.pdf";
    double margin = 50;

    var headers = saveResponse.ReportFields.Split(',').Select(h => h.Trim()).ToList();
    int columnCount = headers.Count;
    int rowCount = saveResponse.ReportDatatable.Rows.Count;

    PaperType pageSize = DeterminePageSize(rowCount);
    Size pageDimensions = PaperSizes.GetPaperSize(pageSize);

    double availableWidth = pageDimensions.Width - (2 * margin);
    double columnWidth = availableWidth / columnCount;
    int rowsPerPage = (int)((pageDimensions.Height - (2 * margin + 100)) / 30);

    // Split Data into Pages
    List<List<string[]>> paginatedData = SplitDataIntoPages(saveResponse.ReportDatatable, headers, rowsPerPage);

    RadFixedDocument document = new RadFixedDocument();

    // Parallel Processing of Pages
    Parallel.ForEach(Enumerable.Range(0, paginatedData.Count), i =>
    {
        RadFixedPage page = new RadFixedPage { Size = pageDimensions };
        FixedContentEditor editor = new FixedContentEditor(page);

        AddHeader(editor, "AdHoc Report", headers, columnWidth, margin);
        DrawTable(editor, paginatedData[i], columnWidth, margin);
        AddFooter(editor, i + 1, paginatedData.Count, margin);

        lock (document)
        {
            document.Pages.Add(page); // Thread-safe addition
        }
    });

    using (MemoryStream stream = new MemoryStream())
    {
        PdfFormatProvider provider = new PdfFormatProvider();
        provider.Export(document, stream);
        return File(stream.ToArray(), "application/pdf", fileName);
    }
}
