public class PdfController : Controller
{
    private readonly IReportComponent _reportComponent;
    private readonly IUserContext _userContext;

    public PdfController(IReportComponent reportComponent, IUserContext userContext)
    {
        _reportComponent = reportComponent;
        _userContext = userContext;
    }

    [HttpGet]
    public async Task<IActionResult> GenerateAdHocReport(int reportId)
    {
        // Fetch the report data
        var saveResponse = await _reportComponent.GetAdhocReportDatatable(reportId, _userContext.EmployeeId);

        if (saveResponse == null || !saveResponse.Any())
        {
            return Content("No data available");
        }

        // Header Information
        string exportDate = DateTime.Now.ToString("dd-MMM-yyyy");
        string criteria = "(BACO Override = Yes)"; // Customize this criteria dynamically if needed

        // Create a StringBuilder for HTML content
        var sb = new StringBuilder();

        // Start HTML Structure
        sb.Append("<html><head><title>AdHoc Report</title>");
        sb.Append("<style>");
        sb.Append("body {font-family: Arial, sans-serif; margin: 0; padding: 0;}");
        sb.Append("table {width: 100%; border-collapse: collapse; margin-top: 80px;}");  // Adjust for header space
        sb.Append("th, td {padding: 8px; text-align: left; border: 1px solid black;}");
        sb.Append("th {background-color: #f2f2f2;}");
        sb.Append(".header {border-left: 5px solid #F5B700; padding-left: 10px; margin-bottom: 20px;}");
        sb.Append(".fixed-header {position: fixed; top: 0; left: 0; right: 0; background-color: white; z-index: 9999;}");
        sb.Append("@page { size: A4; margin: 20mm; }");  // Set margins to avoid content being cut off
        sb.Append("thead {display: table-header-group;}");  // Ensure table headers repeat
        sb.Append("</style>");
        sb.Append("</head><body>");

        // Add Custom Header Section
        sb.Append("<div class='header'>");
        sb.Append("<h2 style='margin: 0;'>Report Data</h2>");
        sb.Append($"<p style='margin: 5px 0; font-size: 14px;'>{exportDate}</p>");
        sb.Append($"<p style='margin: 5px 0; font-size: 14px;'>Criteria: {criteria}</p>");
        sb.Append("</div>");

        // Add Dynamic Table
        sb.Append("<table>");
        sb.Append("<thead>");
        sb.Append("<tr>");
        var firstRow = saveResponse.First();
        var columnNames = ((IDictionary<string, object>)firstRow).Keys;

        // Add Table Headers
        foreach (var column in columnNames)
        {
            sb.Append($"<th>{column}</th>");
        }
        sb.Append("</tr>");
        sb.Append("</thead>");
        sb.Append("<tbody>");

        // Add Table Rows
        foreach (var row in saveResponse)
        {
            sb.Append("<tr>");
            foreach (var column in columnNames)
            {
                sb.Append($"<td>{((IDictionary<string, object>)row)[column]}</td>");
            }
            sb.Append("</tr>");
        }

        sb.Append("</tbody>");
        sb.Append("</table>");

        // End HTML Structure
        sb.Append("</body></html>");

        // Convert HTML to PDF using Winnovative
        HtmlToPdfConverter converter = new HtmlToPdfConverter();

        // Convert the HTML string to a PDF byte array
        byte[] pdfBuffer = converter.ConvertHtml(sb.ToString(), null);

        // Return PDF as a downloadable file
        return File(pdfBuffer, "application/pdf", "AdHocReport.pdf");
    }
}
